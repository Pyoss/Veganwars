from adventures import locations
import file_manager
from bot_utils import bot_methods


class TutorialEntrance(locations.OpenLocation):
    image = file_manager.my_path + '/files/images/backgrounds/tutorial_cage.jpg'
    name = 'tutorial_entrance'

    def __init__(self, x, y, dungeon, map_tuple):
        locations.OpenLocation.__init__(self, x, y, dungeon, map_tuple)
        self.emote = '-'
        self.open = False
        self.looked = False
        self.key_taken = False

    def move_permission(self, movement, call):
        if not movement.end_location.available():
            self.answer_callback_query(call, "–≠—Ç–æ —Å–∏–º–≤–æ–ª —Å—Ç–µ–Ω—ã: –ü—Ä–æ–π—Ç–∏ —Ç—É—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        elif not self.open and movement.end_location != self:
            self.answer_callback_query(call, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ, –ø–æ–∫–∞ –Ω–µ –æ—Ç–∫—Ä–æ–µ—Ç–µ –∫–ª–µ—Ç–∫—É.', alert=True)
            return False
        return True

    # –§—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∫–æ–º–Ω–∞—Ç—É. –ò–º–µ–Ω–Ω–æ —Å—é–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –ø–∏—Ö–∞—Ç—å —Å–æ–±—ã—Ç–∏—è.
    def enter(self):
        lang_tuple = self.get_greet_tuple()
        self.dungeon.party.send_message(lang_tuple, image=self.image, leader_reply=True,
                                        short_member_ui=True, reply_markup_func=self.get_action_keyboard)

        self.dungeon.party.send_message('<‚ÑπÔ∏è–°–Ω–∏–∑—É –í—ã –≤–∏–¥–∏—Ç–µ –º–µ–Ω—é –∫–∞—Ä—Ç—ã —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏. üë• –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –ª–æ–∫–∞—Ü–∏—é, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è '
                                        '–í–∞—à–∞ –≥—Ä—É–ø–ø–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É üë• –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ –¥–∞–Ω–Ω–æ–π '
                                        '–ª–æ–∫–∞—Ü–∏–∏. –î–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ —Å–æ—Å–µ–¥–Ω–∏—Ö –ª–æ–∫–∞—Ü–∏–π.>')

        if not self.action_expected:
            for member in self.dungeon.party.members:
                member.occupied = False
            self.dungeon.update_map(new=True)

    def get_idle_buttons(self):
        buttons = []
        if not self.looked:
            buttons.append(('0', self.look_around))
        elif not self.key_taken:
            buttons.append(('1', self.take_key))
        return buttons

    def throwed(self, name):
        if name == 'tutorial_key':
            self.looked = False
            self.key_taken = False

    def look_around(self, call):
        self.reset_message('text_1')
        self.looked = True
        for member in self.dungeon.party.members:
            member.message_id = None
        self.dungeon.party.member_dict[call.from_user.id].member_menu_start()

    def take_key(self, call):
        self.reset_message('text_2')
        self.key_taken = True
        for member in self.dungeon.party.members:
            member.message_id = None
            member.add_item('tutorial_key')
            bot_methods.send_message(member.chat_id,
                '<–í—ã –ø–æ–¥–Ω—è–ª–∏ –∫–ª—é—á. –ü–æ–¥–Ω—è—Ç—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è —É –≤–∞—Å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.>')

        self.dungeon.party.member_dict[call.from_user.id].member_menu_start()